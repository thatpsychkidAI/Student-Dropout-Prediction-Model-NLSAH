import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report

# Load data
df = pd.read_csv('addhealth.csv')

# Preprocess data
df = df[['age', 'sex', 'race', 'urban', 'family_structure', 'parental_education', 'sibling_count', 'GPA', 'school_type', 'dropout']]
df = df.dropna()
df = pd.get_dummies(df, columns=['sex', 'race', 'urban', 'family_structure', 'parental_education', 'school_type'])
X = df.drop(['dropout'], axis=1)
y = df['dropout']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Exploratory data analysis
sns.countplot(df['dropout'])
plt.title('Distribution of Dropout Status')
plt.xlabel('Dropout')
plt.ylabel('Count')
plt.show()

sns.boxplot(x='dropout', y='GPA', data=df)
plt.title('Relationship Between Dropout Status and GPA')
plt.xlabel('Dropout')
plt.ylabel('GPA')
plt.show()

# Feature selection
corr_matrix = df.corr()
sns.heatmap(corr_matrix, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

important_features = ['age', 'GPA', 'sex_Female', 'race_Black', 'race_Hispanic', 'family_structure_Lives with other relatives', 'parental_education_Some high school', 'parental_education_High school diploma/GED', 'parental_education_Some college', 'school_type_Public']

# Machine learning modeling
models = {'Logistic Regression': LogisticRegression(), 'Decision Tree': DecisionTreeClassifier(), 'Random Forest': RandomForestClassifier()}
for name, model in models.items():
    model.fit(X_train_scaled[important_features], y_train)
    y_pred = model.predict(X_test_scaled[important_features])
    print(name)
    print(classification_report(y_test, y_pred))
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, cmap='Blues')
    plt.title(name)
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()
